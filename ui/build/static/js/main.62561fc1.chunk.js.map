{"version":3,"sources":["images/logo.png","components/Header.tsx","pages/Gallery.tsx","pages/Upload.tsx","App.js","serviceWorker.js","index.tsx"],"names":["module","exports","Header","to","src","logo","alt","Gallery","useAxios","url","method","data","loading","error","className","results","map","Upload","useState","imageToUpload","setImageToUpload","manual","uploadImage","data-testid","onSubmit","e","preventDefault","formData","FormData","append","headers","catch","console","log","onChange","files","target","length","type","required","value","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,yPCK5B,SAASC,IACtB,OACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,IAAMC,IAAI,6BAEtB,4BACE,4BACE,kBAAC,IAAD,CAAMH,GAAG,YAAT,YAEF,oCACA,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,a,0BCbK,SAASI,IAAW,IAAD,EACGC,YAAS,CAC1CC,IAAK,aACLC,OAAQ,QAHsB,sBACvBC,EADuB,EACvBA,KAAMC,EADiB,EACjBA,QAASC,EADQ,EACRA,MAcxB,OAAID,EAAgB,yCAChBC,EAAc,qCACdF,EAEA,yBAAKG,UAAU,mBAAf,oCAEE,yBAAKA,UAAU,cAdZH,EAAKI,QAAQC,KAAI,SAACZ,GACvB,OACE,yBAAKU,UAAU,SACb,yBAAKV,IAAKA,EAAIK,iBAOtB,EClBa,SAASQ,IAAU,IAAD,EACWC,mBAAsB,MADjC,mBACxBC,EADwB,KACTC,EADS,OAEiBZ,YAC9C,CACEC,IAAK,eACLC,OAAQ,QAEV,CAAEW,QAAQ,IAPmB,0BAEtBV,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,QAASC,EAFO,EAEPA,MAASS,EAFF,KAoC/B,OAAIV,EAAgB,yCAChBC,EAAc,qCACdF,EAAa,iEAGf,6BACE,gDACA,0BAAMY,cAAY,OAAOC,SAjCd,SAACC,GAEd,GADAA,EAAEC,iBACEP,EAAe,CACjB,IAAMQ,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASV,GACzBG,EAAY,CACVX,KAAMgB,EACNG,QAAS,CACP,eAAgB,yBAEjBC,OAAM,SAAAlB,GACPmB,QAAQC,IAAI,0BAA2BpB,SAuBvC,2BACEU,cAAY,eACZW,SApBkB,SAAC,GAEW,IAD1BC,EACyB,EADnCC,OAAUD,MAENA,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOE,QAAS,EAC3BL,QAAQC,IAAI,4BACHE,GACTf,EAAiBe,EAAM,KAenBG,KAAK,OACLC,UAAQ,IAEV,gEACA,2BAAOD,KAAK,SAAShC,IAAI,SAASkC,MAAM,aC/BjCC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,kBAACvC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,KAAK,YACV,kBAACnC,EAAD,OAEF,kBAAC,IAAD,CAAOmC,KAAK,WACV,kBAACzB,EAAD,UCJU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAM6C,c","file":"static/js/main.62561fc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9419036f.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../images/logo.png\";\nimport \"../styles/header.scss\";\n\nexport default function Header() {\n  return (\n    <header>\n      <Link to=\"/\">\n        <img src={logo} alt=\"throwback thursday logo\"></img>\n      </Link>\n      <ul>\n        <li>\n          <Link to=\"/gallery\">Gallery</Link>\n        </li>\n        <li>Vote</li>\n        <li>\n          <Link to=\"/upload\">Upload</Link>\n        </li>\n      </ul>\n    </header>\n  );\n}\n","import React from \"react\";\nimport useAxios from \"axios-hooks\";\nimport \"../styles/gallery.scss\";\n\nexport default function Gallery() {\n  const [{ data, loading, error }] = useAxios({\n    url: \"/allImages\",\n    method: \"get\"\n  });\n\n  const printAllImages = () => {\n    return data.results.map((src: { id: string; url: string }) => {\n      return (\n        <div className=\"image\">\n          <img src={src.url}></img>\n        </div>\n      );\n    });\n  };\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n  if (data)\n    return (\n      <div className=\"image-container\">\n        Thanks for submitting your image!\n        <div className=\"image-grid\">{printAllImages()}</div>\n      </div>\n    );\n}\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\nimport useAxios from \"axios-hooks\";\n\nexport default function Upload() {\n  const [imageToUpload, setImageToUpload] = useState<File | null>(null);\n  const [{ data, loading, error }, uploadImage] = useAxios(\n    {\n      url: \"/uploadImage\",\n      method: \"post\"\n    },\n    { manual: true }\n  );\n\n  const submit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (imageToUpload) {\n      const formData = new FormData();\n      formData.append(\"image\", imageToUpload);\n      uploadImage({\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).catch(error => {\n        console.log(\"Error Uploading Image: \", error);\n      });\n    }\n  };\n\n  const getImageForUpload = ({\n    target: { files }\n  }: ChangeEvent<HTMLInputElement>) => {\n    if (files && files?.length > 1) {\n      console.log(\"too many images selected\");\n    } else if (files) {\n      setImageToUpload(files[0]);\n    }\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n  if (data) return <p> Thanks for submitting your image!</p>;\n\n  return (\n    <div>\n      <h1>Upload a picture</h1>\n      <form data-testid=\"form\" onSubmit={submit}>\n        <input\n          data-testid=\"upload-image\"\n          onChange={getImageForUpload}\n          type=\"file\"\n          required\n        ></input>\n        <label>Upload your best baby picture</label>\n        <input type=\"submit\" alt=\"submit\" value=\"Submit\"></input>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Gallery from \"./pages/Gallery\";\nimport Upload from \"./pages/Upload\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/gallery\">\n          <Gallery />\n        </Route>\n        <Route path=\"/upload\">\n          <Upload />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}